name: 📊 每日股票分析

on:
  schedule:
    - cron: '30 23 * * 0-4'  # UTC 23:30 = 北京时间 7:30 (周一到周五)
    - cron: '30 12 * * 0-4'  # UTC 12:30 = 北京时间 20:30 (周一到周五)
  
  workflow_dispatch:
    inputs:
      test_mode:
        description: '测试模式（只分析一只股票）'
        required: false
        default: 'false'
        type: boolean
      analysis_type:
        description: '分析类型'
        required: false
        default: 'auto'
        type: choice
        options:
        - auto        # 自动判断
        - pre_market  # 开盘前分析
        - post_market # 收盘后分析

jobs:
  stock-analysis:
    runs-on: ubuntu-latest
    environment: env
    permissions:
      contents: write
      issues: write
      pull-requests: write
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
      
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 📊 执行股票分析
      id: analysis
      env:
        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
        TUSHARE_TOKEN: ${{ secrets.TUSHARE_TOKEN }}
        ANALYSIS_TYPE: ${{ github.event.inputs.analysis_type || 'auto' }}
      run: |
        # 判断分析类型
        CURRENT_HOUR=$(date -u +%H)
        if [ "${{ github.event.inputs.analysis_type }}" = "pre_market" ]; then
          ANALYSIS_MODE="pre_market"
          echo "🌅 开盘前分析模式"
        elif [ "${{ github.event.inputs.analysis_type }}" = "post_market" ]; then
          ANALYSIS_MODE="post_market"
          echo "🌆 收盘后分析模式"
        else
          # 自动判断：UTC 23:30 = 开盘前，UTC 12:30 = 收盘后
          if [ "$CURRENT_HOUR" = "23" ] || [ "$CURRENT_HOUR" = "00" ]; then
            ANALYSIS_MODE="pre_market"
            echo "🌅 自动识别：开盘前分析 (UTC $CURRENT_HOUR:xx)"
          else
            ANALYSIS_MODE="post_market"
            echo "🌆 自动识别：收盘后分析 (UTC $CURRENT_HOUR:xx)"
          fi
        fi
        
        # 设置分析模式环境变量
        export ANALYSIS_MODE=$ANALYSIS_MODE
        
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          echo "🧪 测试模式：分析单只股票"
          python main.py --stock 600519.SH
        else
          echo "📊 正式模式：分析股票池"
          python main.py --watchlist
        fi
        
    - name: 📦 上传报告文件
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: stock-analysis-reports-${{ github.run_number }}
        path: |
          reports/**/*.md
          reports/**/*.json
          reports/README.md
        retention-days: 30
        
    - name: 📊 提交报告到仓库
      id: git-push
      if: success()
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # 清理Python缓存文件
        echo "🧹 清理Python缓存文件..."
        find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
        find . -name "*.pyc" -delete 2>/dev/null || true
        
        # 配置Git忽略文件权限变化
        git config core.fileMode false
        
        # 强制同步远程更新
        echo "📥 强制同步远程更新..."
        git fetch origin
        git reset --hard origin/main
        
        # 重新运行Python生成报告（因为reset后文件丢失）
        echo "🔄 重新生成报告文件..."
        if [ "${{ github.event.inputs.test_mode }}" = "true" ]; then
          python main.py --stock 600519.SH
        else
          python main.py --watchlist
        fi
        
        # 添加新生成的文件
        echo "📁 添加报告文件..."
        git add reports/ .gitignore
        
        if git diff --staged --quiet; then
          echo "📝 没有新的报告文件需要提交"
        else
          echo "📊 提交新的分析报告..."
          git commit -m "📊 自动生成股票分析报告 - $(date +'%Y-%m-%d %H:%M:%S')"
          
          # 推送到远程
          echo "📤 推送到远程仓库..."
          git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          echo "✅ 报告推送成功"
        fi
        
    - name: 📧 创建分析完成通知Issue
      if: steps.analysis.conclusion == 'success'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const today = new Date().toLocaleDateString('zh-CN');
          const runNumber = '${{ github.run_number }}';
          const runId = '${{ github.run_id }}';
          const repo = '${{ github.repository }}';
          
          const issueTitle = '📊 每日股票分析报告 - ' + today;
          const issueBody = '## 📊 今日股票分析完成！\n\n' +
            '**分析时间**: ' + today + '\n' +
            '**运行ID**: #' + runNumber + '\n\n' +
            '### 📎 详细报告\n\n' +
            '- 📦 [下载所有报告](https://github.com/' + repo + '/actions/runs/' + runId + ')\n' +
            '- 📋 [查看报告目录](https://github.com/' + repo + '/tree/main/reports) - 按股票和日期分类\n' +
            '- 📊 [报告索引](https://github.com/' + repo + '/blob/main/reports/README.md) - 完整目录导航\n\n' +
            '### 🤖 系统信息\n\n' +
            '- **AI模型**: DeepSeek\n' +
            '- **数据源**: Tushare\n' +
            '- **运行状态**: ✅ 成功\n' +
            '- **下次运行**: 明天 08:00\n\n' +
            '---\n\n' +
            '> 💡 **提示**: 在Actions页面下载完整报告文件。\n\n' +
            '> ⚠️ **风险提示**: 本报告仅供参考，不构成投资建议。投资有风险，决策需谨慎。';

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['📊 分析报告', '🤖 自动生成']
          });
          
          console.log('✅ 成功通知Issue创建完成');
          
    - name: 📧 创建分析失败通知Issue
      if: steps.analysis.conclusion == 'failure'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const today = new Date().toLocaleDateString('zh-CN');
          const runNumber = '${{ github.run_number }}';
          const runId = '${{ github.run_id }}';
          const repo = '${{ github.repository }}';
          
          const issueTitle = '❌ 股票分析失败 - ' + today;
          const issueBody = '## ❌ 今日股票分析失败\n\n' +
            '**失败时间**: ' + today + '\n' +
            '**运行ID**: #' + runNumber + '\n\n' +
            '### 🔍 故障信息\n\n' +
            '请检查以下可能的原因：\n\n' +
            '1. **API密钥问题**: DeepSeek或Tushare API密钥可能过期\n' +
            '2. **网络问题**: API服务可能暂时不可用\n' +
            '3. **代码错误**: 可能存在代码bug\n' +
            '4. **配额限制**: API调用可能超出限制\n\n' +
            '### 📋 排查步骤\n\n' +
            '1. 查看 [Actions日志](https://github.com/' + repo + '/actions/runs/' + runId + ')\n' +
            '2. 检查Secrets中的API密钥是否正确\n' +
            '3. 确认API服务状态是否正常\n' +
            '4. 如问题持续，请手动运行测试\n\n' +
            '---\n\n' +
            '> 🔧 **建议**: 可以手动触发工作流进行测试，或等待下次自动运行。';

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['❌ 错误', '🤖 自动生成', '🚨 需要关注']
          });
          
          console.log('✅ 失败通知Issue创建完成');
          
    - name: 📧 创建Git推送失败通知Issue
      if: steps.analysis.conclusion == 'success' && steps.git-push.conclusion == 'failure'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const today = new Date().toLocaleDateString('zh-CN');
          const runNumber = '${{ github.run_number }}';
          const runId = '${{ github.run_id }}';
          const repo = '${{ github.repository }}';
          
          const issueTitle = '⚠️ 分析成功但推送失败 - ' + today;
          const issueBody = '## ⚠️ 股票分析成功，但Git推送失败\n\n' +
            '**时间**: ' + today + '\n' +
            '**运行ID**: #' + runNumber + '\n\n' +
            '### ✅ 成功部分\n\n' +
            '- ✅ 股票分析完成\n' +
            '- ✅ 报告生成成功\n' +
            '- ✅ 文件上传到Artifacts\n\n' +
            '### ❌ 失败部分\n\n' +
            '- ❌ Git推送到仓库失败（可能是代码冲突）\n\n' +
            '### 📎 获取报告\n\n' +
            '- 📦 [下载分析报告](https://github.com/' + repo + '/actions/runs/' + runId + ')\n' +
            '- 📋 报告已生成但未推送到仓库\n\n' +
            '### 🔧 解决方案\n\n' +
            '1. 手动下载报告文件\n' +
            '2. 等待下次自动运行（已优化推送逻辑）\n' +
            '3. 检查是否有其他进程在修改仓库\n\n' +
            '---\n\n' +
            '> 💡 **说明**: 这不影响分析质量，报告仍可通过Artifacts下载。';

          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: issueTitle,
            body: issueBody,
            labels: ['⚠️ 部分失败', '🤖 自动生成', '📊 分析报告']
          });
          
          console.log('✅ Git推送失败通知Issue创建完成');